//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Material/Input System/Start Button.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @StartButton : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @StartButton()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Start Button"",
    ""maps"": [
        {
            ""name"": ""Touch"",
            ""id"": ""d2d2d2d2-d2d2-d2d2-d2d2-d2d2d2d2d2d2"",
            ""actions"": [
                {
                    ""name"": ""TouchPress"",
                    ""type"": ""Button"",
                    ""id"": ""e3e3e3e3-e3e3-e3e3-e3e3-e3e3e3e3e3e3"",
                    ""expectedControlType"": ""Button""
                }
            ],
            ""bindings"": []
        }
    ],
    ""controlSchemes"": []
}");
        // Touch map
        var touch = asset.FindActionMap("Touch", throwIfNotFound: true);
        TouchPress = touch.FindAction("TouchPress", throwIfNotFound: true);
    }

    public InputAction TouchPress { get; }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }
}